(d => {
    "use strict";
    const r = ThemifyBuilderModuleJs.cssUrl + "video_styles/",
        s = (e, a) => {
            const o = d.selectWithParent("module-video", e),
                l = e => {
                    const s = e.currentTarget,
                        t = s.closest(".module-video").tfTag("video")[0];
                    if (!s.tfClass("tb_video_buffer")[0]) {
                        const i = document.createElement("div"),
                            a = function(e) {
                                let t = 0 < this.duration && 0 < this.buffered.length ? this.buffered.end(0) / this.duration * 100 : 0;
                                t < 2 && (t = 0), 2 < this.readyState && (t = 100, s.tfOff("pointerenter", l, {
                                    passive: !0
                                }), this.tfOff("loadstart waiting progress canplay", a, {
                                    passive: !0
                                }), i.tfOn("transitionend", e => {
                                    requestAnimationFrame(() => {
                                        this.closest(".tb_hover_play").classList.add("tb_video_loaded"), this.dataset.forceplay = 1, d.video([this]), i.remove()
                                    })
                                }, {
                                    passive: !0,
                                    once: !0
                                })), 2 < t && (i.style.width = t + "%")
                            };
                        d.loadCss("video", "tf_video"), d.loadJs("video-player"), i.className = "tb_video_buffer tf_abs_t", s.tfTag("img")[0].after(i), t.tfOn("loadstart waiting progress canplay", a, {
                            passive: !0
                        })
                    }
                    t.load()
                };
            for (let i = o.length - 1; - 1 < i; --i) {
                let s = o[i],
                    e = s.classList,
                    t = s.tfClass("tb_video_overlay")[0];
                if (e.contains("video-overlay") && d.loadCss(r + "overlay", "tb_video_overlay"), e.contains("tb_hover_play")) d.is_builder_active || s.tfTag("img")[0] ? .parentNode.tfOn("pointerenter", l, {
                    passive: !0
                });
                else if (t) d.loadCss(r + "play_button", "tb_video_play_button"), t.tfOn("click", f, {
                    once: !0,
                    passive: !0
                });
                else {
                    let t = s.tfTag("noscript")[0];
                    if (t) {
                        let e = document.createElement("div");
                        e.innerHTML = t.textContent.trim() || t.innerHTML;
                        const n = e.tfTag("iframe")[0];
                        a && n && (n.src = d.updateQueryString("autoplay", "1", n.src), n.allow += ";autoplay"), t.replaceWith(e.firstElementChild)
                    } else if (a) {
                        let e = s.tfTag("video")[0];
                        e.dataset.autoplay = 1, d.video([e])
                    }
                }
                e.remove("tf_lazy")
            }
        },
        f = function(e) {
            e.stopPropagation();
            const t = this.closest(".module-video");
            t.classList.add("tf_lazy"), this.remove(), s(t, 1)
        };
    d.on("builder_load_module_partial", (e, t) => {
        !0 === t && !e.classList.contains("module-video") || s(e)
    })
})(Themify);